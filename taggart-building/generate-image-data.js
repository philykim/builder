const fs = require('fs');
const path = require('path');

const imagesDir = path.join(__dirname, 'src/assets/images');
const outputTsFile = path.join(__dirname, 'src/app/generated-image-data.ts');

const imageData = {};

// Function to convert kebab-case to Title Case for alt text
function toTitleCase(str) {
  return str.replace(/-/g, ' ').replace(
    /\w\S*/g,
    function(txt) {
      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
    }
  );
}

// Read the categories (subdirectories) from the images directory
fs.readdirSync(imagesDir, { withFileTypes: true })
  .filter(dirent => dirent.isDirectory())
  .forEach(dir => {
    const category = dir.name;
    const categoryDir = path.join(imagesDir, category);
    const imageFiles = fs.readdirSync(categoryDir)
      .filter(file => /\.(png|jpg|jpeg|gif|webp)$/i.test(file));

    if (imageFiles.length > 0) {
      imageData[category] = imageFiles.map(file => {
        const title = toTitleCase(path.parse(file).name);
        return {
          url: `assets/images/${category}/${file}`,
          alt: title,
          title: title,
          description: `${toTitleCase(category)} project image.`,
        };
      });
    }
  });

// Handle images in the root of src/assets/images
const rootImageFiles = fs.readdirSync(imagesDir, { withFileTypes: true })
  .filter(dirent => dirent.isFile() && /\.(png|jpg|jpeg|gif|webp)$/i.test(dirent.name));

if (rootImageFiles.length > 0) {
    imageData['general'] = rootImageFiles.map(file => {
        const title = toTitleCase(path.parse(file.name).name);
        return {
            url: `assets/images/${file.name}`,
            alt: title,
            title: title,
            description: 'General project image.',
        }
    });
}

const tsContent = `// This file is auto-generated by generate-image-data.js. Do not edit manually.

export const ALL_IMAGES: { [category: string]: { url: string; alt: string; title: string; description: string }[] } = ${JSON.stringify(imageData, null, 2)};
`;

fs.writeFileSync(outputTsFile, tsContent);

console.log('Image data successfully generated at ' + outputTsFile);